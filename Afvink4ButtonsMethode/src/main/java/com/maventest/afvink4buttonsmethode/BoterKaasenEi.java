/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.maventest.afvink4buttonsmethode;

import java.awt.Font;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author thijs
 */
public class BoterKaasenEi extends javax.swing.JFrame {

    /**
     * Creates new form BoterKaasenEi
     */
    public BoterKaasenEi() {
        initComponents();
        Order();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ButtonTopLeft = new javax.swing.JButton();
        ButtonTopMid = new javax.swing.JButton();
        ButtonTopRight = new javax.swing.JButton();
        ButtonMidLeft = new javax.swing.JButton();
        ButtonMidMid = new javax.swing.JButton();
        ButtonMidRight = new javax.swing.JButton();
        ButtonBottomLeft = new javax.swing.JButton();
        ButtonBottomMid = new javax.swing.JButton();
        ButtonBottomRight = new javax.swing.JButton();
        MessageLabel = new javax.swing.JLabel();
        AgainstPCButton = new javax.swing.JButton();
        AgainstPCLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Boter kaas en wat eieren");
        setName("BoterFrame"); // NOI18N

        ButtonTopLeft.setText("?");
        ButtonTopLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTopLeftActionPerformed(evt);
            }
        });

        ButtonTopMid.setText("?");
        ButtonTopMid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTopMidActionPerformed(evt);
            }
        });

        ButtonTopRight.setText("?");
        ButtonTopRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTopRightActionPerformed(evt);
            }
        });

        ButtonMidLeft.setText("?");
        ButtonMidLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMidLeftActionPerformed(evt);
            }
        });

        ButtonMidMid.setText("?");
        ButtonMidMid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMidMidActionPerformed(evt);
            }
        });

        ButtonMidRight.setText("?");
        ButtonMidRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonMidRightActionPerformed(evt);
            }
        });

        ButtonBottomLeft.setText("?");
        ButtonBottomLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBottomLeftActionPerformed(evt);
            }
        });

        ButtonBottomMid.setText("?");
        ButtonBottomMid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBottomMidActionPerformed(evt);
            }
        });

        ButtonBottomRight.setText("?");
        ButtonBottomRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBottomRightActionPerformed(evt);
            }
        });

        MessageLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        MessageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        AgainstPCButton.setText("PC");
        AgainstPCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgainstPCButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ButtonTopLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonTopMid)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonTopRight))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ButtonMidLeft)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonMidMid)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonMidRight))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(ButtonBottomLeft)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonBottomMid)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ButtonBottomRight))))
                        .addGap(0, 58, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(AgainstPCLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(AgainstPCButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ButtonBottomLeft, ButtonBottomMid, ButtonBottomRight, ButtonMidLeft, ButtonMidMid, ButtonMidRight, ButtonTopLeft, ButtonTopMid, ButtonTopRight});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ButtonTopMid)
                        .addComponent(ButtonTopRight))
                    .addComponent(ButtonTopLeft, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonMidLeft)
                    .addComponent(ButtonMidMid)
                    .addComponent(ButtonMidRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonBottomLeft)
                    .addComponent(ButtonBottomMid)
                    .addComponent(ButtonBottomRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AgainstPCButton)
                    .addComponent(AgainstPCLabel))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ButtonBottomLeft, ButtonBottomMid, ButtonBottomRight, ButtonMidLeft, ButtonMidMid, ButtonMidRight, ButtonTopLeft, ButtonTopMid, ButtonTopRight});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonTopLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTopLeftActionPerformed
        PlaceTL = false;PCTurn = true;
        ButtonTopLeft.setEnabled(PlaceTL);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';TLPlayerX = true;
        }else{
            player = 'O';TLPlayerO = true;
        }
        ButtonTopLeft.setText(Character.toString(player));
        Placing(1, player);
    }//GEN-LAST:event_ButtonTopLeftActionPerformed

    private void ButtonTopMidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTopMidActionPerformed
        PlaceTM = false;PCTurn = true;
        ButtonTopMid.setEnabled(PlaceTM);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';TMPlayerX = true;
        }else{
            player = 'O';TMPlayerO = true;
        }
        ButtonTopMid.setText(Character.toString(player));
        Placing(2, player);
    }//GEN-LAST:event_ButtonTopMidActionPerformed

    private void ButtonTopRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTopRightActionPerformed
        PlaceTR = false;PCTurn = true;
        ButtonTopRight.setEnabled(PlaceTR);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';TRPlayerX = true;
        }else{
            player = 'O';TRPlayerO = true;
        }
        ButtonTopRight.setText(Character.toString(player));
        Placing(3, player);
    }//GEN-LAST:event_ButtonTopRightActionPerformed

    private void ButtonMidLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMidLeftActionPerformed
        PlaceML = false;PCTurn = true;
        ButtonMidLeft.setEnabled(PlaceML);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';MLPlayerX = true;
        }else{
            player = 'O';MLPlayerO = true;
        }
        ButtonMidLeft.setText(Character.toString(player));
        Placing(4, player);
    }//GEN-LAST:event_ButtonMidLeftActionPerformed

    private void ButtonMidMidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMidMidActionPerformed
        PlaceMM = false;PCTurn = true;
        ButtonMidMid.setEnabled(PlaceMM);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';MMPlayerX = true;
        }else{
            player = 'O';MMPlayerO = true;
        }
        ButtonMidMid.setText(Character.toString(player));
        Placing(5, player);
    }//GEN-LAST:event_ButtonMidMidActionPerformed

    private void ButtonMidRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonMidRightActionPerformed
        PlaceMR = false;PCTurn = true;
        ButtonMidRight.setEnabled(PlaceMR);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';MRPlayerX = true;
        }else{
            player = 'O';MRPlayerO = true;
        }
        ButtonMidRight.setText(Character.toString(player));
        Placing(6, player);
    }//GEN-LAST:event_ButtonMidRightActionPerformed

    private void ButtonBottomLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBottomLeftActionPerformed
        PlaceBL = false;PCTurn = true;
        ButtonBottomLeft.setEnabled(PlaceBL);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';BLPlayerX = true;
        }else{
            player = 'O';BLPlayerO = true;
        }
        ButtonBottomLeft.setText(Character.toString(player));
        Placing(7, player);
    }//GEN-LAST:event_ButtonBottomLeftActionPerformed

    private void ButtonBottomMidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBottomMidActionPerformed
        PlaceBM = false;PCTurn = true;
        ButtonBottomMid.setEnabled(PlaceBM);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';BMPlayerX = true;
        }else{
            player = 'O';BMPlayerO = true;
        }
        ButtonBottomMid.setText(Character.toString(player));
        Placing(8, player);
    }//GEN-LAST:event_ButtonBottomMidActionPerformed

    private void ButtonBottomRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBottomRightActionPerformed
        PlaceBR = false;PCTurn = true;
        ButtonBottomRight.setEnabled(PlaceBR);
        
        char player;
        if(Turns % 2 == 1){
            player = 'X';BRPlayerX = true;
        }else{
            player = 'O';BRPlayerO = true;
        }
        ButtonBottomRight.setText(Character.toString(player));
        Placing(9, player);
    }//GEN-LAST:event_ButtonBottomRightActionPerformed

    private void AgainstPCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgainstPCButtonActionPerformed
        AgainstPCLabel.setText("You're playing against the pc");
        Comp = true;PCTurn = false;
        Turns = 0;
        if(AgainstPCButton.isEnabled()){
            PCThread = new Thread() {
                public void run(){
                    ComputerPlays();
                }

            };
            PCThread.start();   
        }
        AgainstPCButton.setEnabled(false);
    }//GEN-LAST:event_AgainstPCButtonActionPerformed

    
    private void Order(){
        
        if(!Comp){
            int turn = randomGenerator.nextInt(10);
            if(turn % 2 == 0){
                MessageLabel.setText("Player O starts");
            }else{
                Turns++;
                MessageLabel.setText("Player X starts");
            }
        }else{
            MessageLabel.setText("You start");
        }
    }
    
    
    private void Placing(int ButtonNR, char Player){
        Turns++;
        if(!Comp){
            if(Player == 'X'){
                MessageLabel.setText("Player O's turn");
            }else{MessageLabel.setText("Player X's turn");}
            System.out.println(Turns);
            Directions();
        }else{
            MessageLabel.setText("Your turn");
        }
        
        
        
        
        
    }
    
    private void Directions(){ // Or logic
        /* Options layout:
        TL,ML,BL
        TM,MM,BM :: Vertical
        TR,MR,BR
        
        TL,MM,BR :: Dia
        BL,MM,TR
        
        TL,TM,TR
        ML,MM,MR :: horizontal
        BL,BM,BR
        */
        
        if(TLPlayerX & MLPlayerX & BLPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(TLPlayerO & MLPlayerO & BLPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        if(TMPlayerX & MMPlayerX & BMPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(TMPlayerO & MMPlayerO & BMPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        if(TRPlayerX & MRPlayerX & BRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(TRPlayerO & MRPlayerO & BRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
   
        if(TLPlayerX & MMPlayerX & BRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(TLPlayerO & MMPlayerO & BRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        if(BLPlayerX & MMPlayerX & TRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(BLPlayerO & MMPlayerO & TRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        
        if(TLPlayerX & TMPlayerX & TRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(TLPlayerO & TMPlayerO & TRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        if(MLPlayerX & MMPlayerX & MRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(MLPlayerO & MMPlayerO & MRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        if(BLPlayerX & BMPlayerX & BRPlayerX){MessageLabel.setText("Player X wins");winner=true;} if(BLPlayerO & BMPlayerO & BRPlayerO){MessageLabel.setText("Player O wins");winner=true;}
        
        if(Turns == 9 & !winner){
            draw = true;
            MessageLabel.setText("Draw, nobody wins");
        }     
    }
    
    
    private void ComputerPlays(){
        System.out.println("Test PC Plays");
        while (!winner){
            if(PCTurn){
                MessageLabel.setText("PC's turn");
                try {
                    Thread.sleep(2);                    
                } catch (InterruptedException ex) {
                    Logger.getLogger(BoterKaasenEi.class.getName()).log(Level.SEVERE, null, ex);
                }
                Moves();
            }else{
                MessageLabel.setText("Your Turn");
            }
        }
        
       
        
    }
    
    private void Moves(){
        String[] PlayerMoves = {"null"};
        
        
        if(TLPlayerO){
            ButtonMidMid.setEnabled(false);
            ButtonMidMid.setText("PC");
            MMPlayerX = true;PCTurn=false;
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoterKaasenEi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoterKaasenEi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoterKaasenEi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoterKaasenEi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoterKaasenEi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgainstPCButton;
    private javax.swing.JLabel AgainstPCLabel;
    private javax.swing.JButton ButtonBottomLeft;
    private javax.swing.JButton ButtonBottomMid;
    private javax.swing.JButton ButtonBottomRight;
    private javax.swing.JButton ButtonMidLeft;
    private javax.swing.JButton ButtonMidMid;
    private javax.swing.JButton ButtonMidRight;
    private javax.swing.JButton ButtonTopLeft;
    private javax.swing.JButton ButtonTopMid;
    private javax.swing.JButton ButtonTopRight;
    private javax.swing.JLabel MessageLabel;
    // End of variables declaration//GEN-END:variables
    private boolean PlaceTL, PlaceTM, PlaceTR, PlaceML, PlaceMM, PlaceMR, PlaceBL, PlaceBM, PlaceBR = true;
    private boolean TLPlayerX, TMPlayerX, TRPlayerX, MLPlayerX, MMPlayerX, MRPlayerX, BLPlayerX, BMPlayerX, BRPlayerX = false;
    private boolean TLPlayerO, TMPlayerO, TRPlayerO, MLPlayerO, MMPlayerO, MRPlayerO, BLPlayerO, BMPlayerO, BRPlayerO = false;
    private boolean draw, winner;
    private boolean Comp, PCTurn = false;
            
    private int Turns = 0;
    Random randomGenerator = new Random();
    
    private Thread PCThread;





}
